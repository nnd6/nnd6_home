(defvar nnd6-map nil
  "My own bind map")
(if (not nnd6-map)
	 (progn
	   (setq nnd6-map (lookup-key global-map "\C-U"))
	   (if (not (keymapp nnd6-map))
	       (setq nnd6-map (make-keymap)))
	   ))
(define-key nnd6-map	"\C-U"	'universal-argument)
(define-key global-map	"\C-U"	nnd6-map)

(define-key nnd6-map	"\C-C"	'compile)
(define-key nnd6-map	"\C-E"	'eval-current-buffer)
(define-key nnd6-map	"\C-G"	'goto-line)
(define-key nnd6-map	"\C-I"	'quoted-insert)
;;(define-key nnd6-map	"\C-M"	'save-some-buffers-no-question)
(define-key nnd6-map	"\C-M"	'save-some-buffers)
(define-key nnd6-map	"\C-T"	'toggle-truncate-lines)
(define-key nnd6-map	"\C-V"	'visit-function)
(define-key nnd6-map	"\C-\\"	'isearch-forward-regexp)
(define-key nnd6-map	"\C-^"	'isearch-backward-regexp)
(define-key nnd6-map	">"	'end-of-window)
(define-key nnd6-map	"<"	'beginning-of-window)
(define-key nnd6-map	"d"	'delete-window)
(define-key nnd6-map	"e"	'eval-expression)
(define-key nnd6-map	"g"	'grep)
(define-key nnd6-map	"k"	'copy-line)
(define-key nnd6-map	"q"	'query-replace)
(define-key nnd6-map	"r"	'replace-string)
(define-key nnd6-map	"Q"	'query-replace-regexp)
(define-key nnd6-map	"R"	'replace-regexp)
(define-key nnd6-map	"V"	'find-file-other-window)
(define-key nnd6-map	")"	'vi-type-paren-match)
(define-key nnd6-map	"("	'vi-type-paren-match)
(define-key nnd6-map	"]"	'vi-type-paren-match)
(define-key nnd6-map	"["	'vi-type-paren-match)
(define-key nnd6-map	"}"	'vi-type-paren-match)
(define-key nnd6-map	"{"	'vi-type-paren-match)
(setq search-exit-char	?\C-L)
;;(setq search-repeat-char	?\C-\\)
;;(setq search-reverse-char	?\C-^)
(define-key nnd6-map "\C-r" 'recentf-open-files)
